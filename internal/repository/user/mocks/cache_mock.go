// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/neracastle/auth/internal/repository/user.Cache -o cache_mock.go -n CacheMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	domain "github.com/neracastle/auth/internal/domain/user"
)

// CacheMock implements user.Cache
type CacheMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetByID          func(ctx context.Context, id int64) (up1 *domain.User, err error)
	inspectFuncGetByID   func(ctx context.Context, id int64)
	afterGetByIDCounter  uint64
	beforeGetByIDCounter uint64
	GetByIDMock          mCacheMockGetByID

	funcSave          func(ctx context.Context, up1 *domain.User, d1 time.Duration) (err error)
	inspectFuncSave   func(ctx context.Context, up1 *domain.User, d1 time.Duration)
	afterSaveCounter  uint64
	beforeSaveCounter uint64
	SaveMock          mCacheMockSave
}

// NewCacheMock returns a mock for user.Cache
func NewCacheMock(t minimock.Tester) *CacheMock {
	m := &CacheMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetByIDMock = mCacheMockGetByID{mock: m}
	m.GetByIDMock.callArgs = []*CacheMockGetByIDParams{}

	m.SaveMock = mCacheMockSave{mock: m}
	m.SaveMock.callArgs = []*CacheMockSaveParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCacheMockGetByID struct {
	mock               *CacheMock
	defaultExpectation *CacheMockGetByIDExpectation
	expectations       []*CacheMockGetByIDExpectation

	callArgs []*CacheMockGetByIDParams
	mutex    sync.RWMutex
}

// CacheMockGetByIDExpectation specifies expectation struct of the Cache.GetByID
type CacheMockGetByIDExpectation struct {
	mock    *CacheMock
	params  *CacheMockGetByIDParams
	results *CacheMockGetByIDResults
	Counter uint64
}

// CacheMockGetByIDParams contains parameters of the Cache.GetByID
type CacheMockGetByIDParams struct {
	ctx context.Context
	id  int64
}

// CacheMockGetByIDResults contains results of the Cache.GetByID
type CacheMockGetByIDResults struct {
	up1 *domain.User
	err error
}

// Expect sets up expected params for Cache.GetByID
func (mmGetByID *mCacheMockGetByID) Expect(ctx context.Context, id int64) *mCacheMockGetByID {
	if mmGetByID.mock.funcGetByID != nil {
		mmGetByID.mock.t.Fatalf("CacheMock.GetByID mock is already set by Set")
	}

	if mmGetByID.defaultExpectation == nil {
		mmGetByID.defaultExpectation = &CacheMockGetByIDExpectation{}
	}

	mmGetByID.defaultExpectation.params = &CacheMockGetByIDParams{ctx, id}
	for _, e := range mmGetByID.expectations {
		if minimock.Equal(e.params, mmGetByID.defaultExpectation.params) {
			mmGetByID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetByID.defaultExpectation.params)
		}
	}

	return mmGetByID
}

// Inspect accepts an inspector function that has same arguments as the Cache.GetByID
func (mmGetByID *mCacheMockGetByID) Inspect(f func(ctx context.Context, id int64)) *mCacheMockGetByID {
	if mmGetByID.mock.inspectFuncGetByID != nil {
		mmGetByID.mock.t.Fatalf("Inspect function is already set for CacheMock.GetByID")
	}

	mmGetByID.mock.inspectFuncGetByID = f

	return mmGetByID
}

// Return sets up results that will be returned by Cache.GetByID
func (mmGetByID *mCacheMockGetByID) Return(up1 *domain.User, err error) *CacheMock {
	if mmGetByID.mock.funcGetByID != nil {
		mmGetByID.mock.t.Fatalf("CacheMock.GetByID mock is already set by Set")
	}

	if mmGetByID.defaultExpectation == nil {
		mmGetByID.defaultExpectation = &CacheMockGetByIDExpectation{mock: mmGetByID.mock}
	}
	mmGetByID.defaultExpectation.results = &CacheMockGetByIDResults{up1, err}
	return mmGetByID.mock
}

// Set uses given function f to mock the Cache.GetByID method
func (mmGetByID *mCacheMockGetByID) Set(f func(ctx context.Context, id int64) (up1 *domain.User, err error)) *CacheMock {
	if mmGetByID.defaultExpectation != nil {
		mmGetByID.mock.t.Fatalf("Default expectation is already set for the Cache.GetByID method")
	}

	if len(mmGetByID.expectations) > 0 {
		mmGetByID.mock.t.Fatalf("Some expectations are already set for the Cache.GetByID method")
	}

	mmGetByID.mock.funcGetByID = f
	return mmGetByID.mock
}

// When sets expectation for the Cache.GetByID which will trigger the result defined by the following
// Then helper
func (mmGetByID *mCacheMockGetByID) When(ctx context.Context, id int64) *CacheMockGetByIDExpectation {
	if mmGetByID.mock.funcGetByID != nil {
		mmGetByID.mock.t.Fatalf("CacheMock.GetByID mock is already set by Set")
	}

	expectation := &CacheMockGetByIDExpectation{
		mock:   mmGetByID.mock,
		params: &CacheMockGetByIDParams{ctx, id},
	}
	mmGetByID.expectations = append(mmGetByID.expectations, expectation)
	return expectation
}

// Then sets up Cache.GetByID return parameters for the expectation previously defined by the When method
func (e *CacheMockGetByIDExpectation) Then(up1 *domain.User, err error) *CacheMock {
	e.results = &CacheMockGetByIDResults{up1, err}
	return e.mock
}

// GetByID implements user.Cache
func (mmGetByID *CacheMock) GetByID(ctx context.Context, id int64) (up1 *domain.User, err error) {
	mm_atomic.AddUint64(&mmGetByID.beforeGetByIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetByID.afterGetByIDCounter, 1)

	if mmGetByID.inspectFuncGetByID != nil {
		mmGetByID.inspectFuncGetByID(ctx, id)
	}

	mm_params := CacheMockGetByIDParams{ctx, id}

	// Record call args
	mmGetByID.GetByIDMock.mutex.Lock()
	mmGetByID.GetByIDMock.callArgs = append(mmGetByID.GetByIDMock.callArgs, &mm_params)
	mmGetByID.GetByIDMock.mutex.Unlock()

	for _, e := range mmGetByID.GetByIDMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGetByID.GetByIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetByID.GetByIDMock.defaultExpectation.Counter, 1)
		mm_want := mmGetByID.GetByIDMock.defaultExpectation.params
		mm_got := CacheMockGetByIDParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetByID.t.Errorf("CacheMock.GetByID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetByID.GetByIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetByID.t.Fatal("No results are set for the CacheMock.GetByID")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGetByID.funcGetByID != nil {
		return mmGetByID.funcGetByID(ctx, id)
	}
	mmGetByID.t.Fatalf("Unexpected call to CacheMock.GetByID. %v %v", ctx, id)
	return
}

// GetByIDAfterCounter returns a count of finished CacheMock.GetByID invocations
func (mmGetByID *CacheMock) GetByIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByID.afterGetByIDCounter)
}

// GetByIDBeforeCounter returns a count of CacheMock.GetByID invocations
func (mmGetByID *CacheMock) GetByIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByID.beforeGetByIDCounter)
}

// Calls returns a list of arguments used in each call to CacheMock.GetByID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetByID *mCacheMockGetByID) Calls() []*CacheMockGetByIDParams {
	mmGetByID.mutex.RLock()

	argCopy := make([]*CacheMockGetByIDParams, len(mmGetByID.callArgs))
	copy(argCopy, mmGetByID.callArgs)

	mmGetByID.mutex.RUnlock()

	return argCopy
}

// MinimockGetByIDDone returns true if the count of the GetByID invocations corresponds
// the number of defined expectations
func (m *CacheMock) MinimockGetByIDDone() bool {
	for _, e := range m.GetByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByID != nil && mm_atomic.LoadUint64(&m.afterGetByIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetByIDInspect logs each unmet expectation
func (m *CacheMock) MinimockGetByIDInspect() {
	for _, e := range m.GetByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CacheMock.GetByID with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByIDCounter) < 1 {
		if m.GetByIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CacheMock.GetByID")
		} else {
			m.t.Errorf("Expected call to CacheMock.GetByID with params: %#v", *m.GetByIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByID != nil && mm_atomic.LoadUint64(&m.afterGetByIDCounter) < 1 {
		m.t.Error("Expected call to CacheMock.GetByID")
	}
}

type mCacheMockSave struct {
	mock               *CacheMock
	defaultExpectation *CacheMockSaveExpectation
	expectations       []*CacheMockSaveExpectation

	callArgs []*CacheMockSaveParams
	mutex    sync.RWMutex
}

// CacheMockSaveExpectation specifies expectation struct of the Cache.Save
type CacheMockSaveExpectation struct {
	mock    *CacheMock
	params  *CacheMockSaveParams
	results *CacheMockSaveResults
	Counter uint64
}

// CacheMockSaveParams contains parameters of the Cache.Save
type CacheMockSaveParams struct {
	ctx context.Context
	up1 *domain.User
	d1  time.Duration
}

// CacheMockSaveResults contains results of the Cache.Save
type CacheMockSaveResults struct {
	err error
}

// Expect sets up expected params for Cache.Save
func (mmSave *mCacheMockSave) Expect(ctx context.Context, up1 *domain.User, d1 time.Duration) *mCacheMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("CacheMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &CacheMockSaveExpectation{}
	}

	mmSave.defaultExpectation.params = &CacheMockSaveParams{ctx, up1, d1}
	for _, e := range mmSave.expectations {
		if minimock.Equal(e.params, mmSave.defaultExpectation.params) {
			mmSave.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSave.defaultExpectation.params)
		}
	}

	return mmSave
}

// Inspect accepts an inspector function that has same arguments as the Cache.Save
func (mmSave *mCacheMockSave) Inspect(f func(ctx context.Context, up1 *domain.User, d1 time.Duration)) *mCacheMockSave {
	if mmSave.mock.inspectFuncSave != nil {
		mmSave.mock.t.Fatalf("Inspect function is already set for CacheMock.Save")
	}

	mmSave.mock.inspectFuncSave = f

	return mmSave
}

// Return sets up results that will be returned by Cache.Save
func (mmSave *mCacheMockSave) Return(err error) *CacheMock {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("CacheMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &CacheMockSaveExpectation{mock: mmSave.mock}
	}
	mmSave.defaultExpectation.results = &CacheMockSaveResults{err}
	return mmSave.mock
}

// Set uses given function f to mock the Cache.Save method
func (mmSave *mCacheMockSave) Set(f func(ctx context.Context, up1 *domain.User, d1 time.Duration) (err error)) *CacheMock {
	if mmSave.defaultExpectation != nil {
		mmSave.mock.t.Fatalf("Default expectation is already set for the Cache.Save method")
	}

	if len(mmSave.expectations) > 0 {
		mmSave.mock.t.Fatalf("Some expectations are already set for the Cache.Save method")
	}

	mmSave.mock.funcSave = f
	return mmSave.mock
}

// When sets expectation for the Cache.Save which will trigger the result defined by the following
// Then helper
func (mmSave *mCacheMockSave) When(ctx context.Context, up1 *domain.User, d1 time.Duration) *CacheMockSaveExpectation {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("CacheMock.Save mock is already set by Set")
	}

	expectation := &CacheMockSaveExpectation{
		mock:   mmSave.mock,
		params: &CacheMockSaveParams{ctx, up1, d1},
	}
	mmSave.expectations = append(mmSave.expectations, expectation)
	return expectation
}

// Then sets up Cache.Save return parameters for the expectation previously defined by the When method
func (e *CacheMockSaveExpectation) Then(err error) *CacheMock {
	e.results = &CacheMockSaveResults{err}
	return e.mock
}

// Save implements user.Cache
func (mmSave *CacheMock) Save(ctx context.Context, up1 *domain.User, d1 time.Duration) (err error) {
	mm_atomic.AddUint64(&mmSave.beforeSaveCounter, 1)
	defer mm_atomic.AddUint64(&mmSave.afterSaveCounter, 1)

	if mmSave.inspectFuncSave != nil {
		mmSave.inspectFuncSave(ctx, up1, d1)
	}

	mm_params := CacheMockSaveParams{ctx, up1, d1}

	// Record call args
	mmSave.SaveMock.mutex.Lock()
	mmSave.SaveMock.callArgs = append(mmSave.SaveMock.callArgs, &mm_params)
	mmSave.SaveMock.mutex.Unlock()

	for _, e := range mmSave.SaveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSave.SaveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSave.SaveMock.defaultExpectation.Counter, 1)
		mm_want := mmSave.SaveMock.defaultExpectation.params
		mm_got := CacheMockSaveParams{ctx, up1, d1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSave.t.Errorf("CacheMock.Save got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSave.SaveMock.defaultExpectation.results
		if mm_results == nil {
			mmSave.t.Fatal("No results are set for the CacheMock.Save")
		}
		return (*mm_results).err
	}
	if mmSave.funcSave != nil {
		return mmSave.funcSave(ctx, up1, d1)
	}
	mmSave.t.Fatalf("Unexpected call to CacheMock.Save. %v %v %v", ctx, up1, d1)
	return
}

// SaveAfterCounter returns a count of finished CacheMock.Save invocations
func (mmSave *CacheMock) SaveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSave.afterSaveCounter)
}

// SaveBeforeCounter returns a count of CacheMock.Save invocations
func (mmSave *CacheMock) SaveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSave.beforeSaveCounter)
}

// Calls returns a list of arguments used in each call to CacheMock.Save.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSave *mCacheMockSave) Calls() []*CacheMockSaveParams {
	mmSave.mutex.RLock()

	argCopy := make([]*CacheMockSaveParams, len(mmSave.callArgs))
	copy(argCopy, mmSave.callArgs)

	mmSave.mutex.RUnlock()

	return argCopy
}

// MinimockSaveDone returns true if the count of the Save invocations corresponds
// the number of defined expectations
func (m *CacheMock) MinimockSaveDone() bool {
	for _, e := range m.SaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SaveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSaveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSave != nil && mm_atomic.LoadUint64(&m.afterSaveCounter) < 1 {
		return false
	}
	return true
}

// MinimockSaveInspect logs each unmet expectation
func (m *CacheMock) MinimockSaveInspect() {
	for _, e := range m.SaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CacheMock.Save with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SaveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSaveCounter) < 1 {
		if m.SaveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CacheMock.Save")
		} else {
			m.t.Errorf("Expected call to CacheMock.Save with params: %#v", *m.SaveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSave != nil && mm_atomic.LoadUint64(&m.afterSaveCounter) < 1 {
		m.t.Error("Expected call to CacheMock.Save")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CacheMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetByIDInspect()

			m.MinimockSaveInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CacheMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CacheMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetByIDDone() &&
		m.MinimockSaveDone()
}
